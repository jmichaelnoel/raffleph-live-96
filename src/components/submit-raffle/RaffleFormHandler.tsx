
import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { uploadMultipleImages } from '@/utils/imageUtils';
import { normalizeUrl, isValidUrl } from '@/utils/urlUtils';
import { Form } from '@/components/ui/form';
import RaffleFormFields from './RaffleFormFields';
import { Button } from '@/components/ui/button';

// Custom URL validation that normalizes URLs and validates them
const urlSchema = z.string()
  .min(1, 'URL is required')
  .transform(normalizeUrl)
  .refine(isValidUrl, 'Must be a valid URL');

const raffleFormSchema = z.object({
  title: z.string().min(5, 'Title must be at least 5 characters'),
  batchNumber: z.string().optional(),
  description: z.string().min(20, 'Description must be at least 20 characters'),
  grandPrize: z.string().min(3, 'Grand prize is required'),
  grandPrizeValue: z.number().min(1, 'Prize value must be greater than 0'),
  convertibleToCash: z.boolean().default(false),
  category: z.enum(['Cars', 'Motorcycle', 'Gadgets', 'Cash']),
  costPerSlot: z.number().min(1, 'Cost per slot must be greater than 0'),
  totalSlots: z.number().min(1, 'Total slots must be greater than 0'),
  drawDate: z.string().min(1, 'Draw date is required'),
  organizationName: z.string().min(2, 'Organization name is required'),
  facebookPageUrl: urlSchema,
  raffleLink: urlSchema,
  buyingSlotsUrl: urlSchema,
  grandPrizeImages: z.any().optional(),
  consolationPrizes: z.array(z.object({
    title: z.string().min(1, 'Prize title is required'),
    value: z.number().min(0, 'Prize value must be 0 or greater'),
    isCash: z.boolean().default(false),
    images: z.any().optional()
  })).optional(),
  bundlePricing: z.array(z.object({
    slots: z.number().min(1, 'Slots must be greater than 0'),
    price: z.number().min(1, 'Price must be greater than 0')
  })).optional()
});

export type RaffleFormData = z.infer<typeof raffleFormSchema>;

const RaffleFormHandler = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submissionStep, setSubmissionStep] = useState<string>('');
  const { toast } = useToast();

  const form = useForm<RaffleFormData>({
    resolver: zodResolver(raffleFormSchema),
    defaultValues: {
      convertibleToCash: false,
      consolationPrizes: [],
      bundlePricing: []
    }
  });

  const onSubmit = async (data: RaffleFormData) => {
    try {
      setIsSubmitting(true);
      setSubmissionStep('Starting submission...');
      console.log('üöÄ Starting raffle submission with clean RLS policies');
      console.log('üìã Form data:', data);

      // Upload grand prize images with error handling
      let grandPrizeImageUrls: string[] = [];
      if (data.grandPrizeImages && data.grandPrizeImages.length > 0) {
        try {
          setSubmissionStep('Uploading grand prize images...');
          console.log('üì∏ Uploading grand prize images...');
          const uploadResults = await uploadMultipleImages(
            data.grandPrizeImages,
            'raffle-images',
            'grand-prizes'
          );
          grandPrizeImageUrls = uploadResults.map(result => result.url);
          console.log('‚úÖ Grand prize images uploaded:', grandPrizeImageUrls);
        } catch (error) {
          console.warn('‚ö†Ô∏è Grand prize image upload failed, continuing without images:', error);
        }
      }

      setSubmissionStep('Creating raffle record...');
      console.log('üíæ Inserting raffle into database...');
      
      // Prepare raffle data with enhanced logging
      const raffleData = {
        title: data.title,
        batch_number: data.batchNumber || null,
        description: data.description,
        slug: '', // Will be auto-generated by trigger
        grand_prize: data.grandPrize,
        grand_prize_value: data.grandPrizeValue,
        grand_prize_images: grandPrizeImageUrls,
        convertible_to_cash: data.convertibleToCash,
        category: data.category,
        cost_per_slot: data.costPerSlot,
        total_slots: data.totalSlots,
        draw_date: data.drawDate,
        organization_name: data.organizationName,
        facebook_page_url: data.facebookPageUrl,
        raffle_link: data.raffleLink,
        buying_slots_url: data.buyingSlotsUrl,
        approved: false
      };

      console.log('üìù Raffle data prepared:', raffleData);

      const { data: insertedRaffle, error: raffleError } = await supabase
        .from('raffles')
        .insert(raffleData)
        .select()
        .single();

      if (raffleError) {
        console.error('‚ùå Raffle insertion error:', raffleError);
        console.error('üîç Error details:', {
          message: raffleError.message,
          details: raffleError.details,
          hint: raffleError.hint,
          code: raffleError.code
        });
        throw new Error(`Database error: ${raffleError.message}`);
      }

      console.log('‚úÖ Raffle inserted successfully:', insertedRaffle);
      const raffleId = insertedRaffle.id;

      // Insert consolation prizes if any
      if (data.consolationPrizes && data.consolationPrizes.length > 0) {
        setSubmissionStep('Processing consolation prizes...');
        console.log('üéÅ Processing consolation prizes...');
        
        try {
          const consolationPrizesData = await Promise.all(
            data.consolationPrizes.map(async (prize) => {
              let prizeImageUrls: string[] = [];
              if (prize.images && prize.images.length > 0 && !prize.isCash) {
                try {
                  const uploadResults = await uploadMultipleImages(
                    prize.images,
                    'prize-images',
                    'consolation-prizes'
                  );
                  prizeImageUrls = uploadResults.map(result => result.url);
                } catch (error) {
                  console.warn('‚ö†Ô∏è Consolation prize image upload failed:', error);
                }
              }

              return {
                raffle_id: raffleId,
                title: prize.title,
                value: prize.value,
                is_cash: prize.isCash,
                images: prizeImageUrls
              };
            })
          );

          const { error: consolationError } = await supabase
            .from('consolation_prizes')
            .insert(consolationPrizesData);

          if (consolationError) {
            console.error('‚ùå Consolation prizes error:', consolationError);
            throw new Error(`Consolation prizes error: ${consolationError.message}`);
          }
          console.log('‚úÖ Consolation prizes inserted successfully');
        } catch (error) {
          console.warn('‚ö†Ô∏è Consolation prizes processing failed:', error);
        }
      }

      // Insert bundle pricing if any
      if (data.bundlePricing && data.bundlePricing.length > 0) {
        setSubmissionStep('Processing bundle pricing...');
        console.log('üí∞ Processing bundle pricing...');
        
        try {
          const bundlePricingData = data.bundlePricing.map(bundle => ({
            raffle_id: raffleId,
            slots: bundle.slots,
            price: bundle.price
          }));

          const { error: bundleError } = await supabase
            .from('bundle_pricing')
            .insert(bundlePricingData);

          if (bundleError) {
            console.error('‚ùå Bundle pricing error:', bundleError);
            throw new Error(`Bundle pricing error: ${bundleError.message}`);
          }
          console.log('‚úÖ Bundle pricing inserted successfully');
        } catch (error) {
          console.warn('‚ö†Ô∏è Bundle pricing processing failed:', error);
        }
      }

      setSubmissionStep('Complete!');
      console.log('üéâ Raffle submission completed successfully!');
      
      toast({
        title: "üéâ Success!",
        description: "Your raffle has been submitted for review. You'll be notified once it's approved.",
        duration: 5000
      });

      // Reset form
      form.reset();
      console.log('üîÑ Form reset successfully');

    } catch (error) {
      console.error('üí• Submission error details:', error);
      
      let errorMessage = "Something went wrong. Please try again.";
      
      if (error instanceof Error) {
        console.error('üîç Error analysis:', {
          name: error.name,
          message: error.message,
          stack: error.stack
        });
        
        if (error.message.includes('violates row-level security')) {
          errorMessage = "Permission denied. The RLS policies may need adjustment.";
        } else if (error.message.includes('duplicate key')) {
          errorMessage = "A raffle with similar details already exists.";
        } else if (error.message.includes('network')) {
          errorMessage = "Network error. Please check your connection and try again.";
        } else {
          errorMessage = error.message;
        }
      }
      
      toast({
        title: "‚ùå Submission Failed",
        description: errorMessage,
        variant: "destructive",
        duration: 8000
      });
    } finally {
      setIsSubmitting(false);
      setSubmissionStep('');
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          <RaffleFormFields form={form} />
          <div className="flex justify-end">
            <Button 
              type="submit" 
              disabled={isSubmitting}
              className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white px-8 py-3 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? (
                <div className="flex items-center gap-2">
                  <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
                  {submissionStep || 'Submitting...'}
                </div>
              ) : (
                'Submit Raffle'
              )}
            </Button>
          </div>
        </form>
      </Form>
    </div>
  );
};

export default RaffleFormHandler;
